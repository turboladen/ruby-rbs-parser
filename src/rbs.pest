WHITESPACE = _{ " " | NEWLINE | "\t" }
COMMENT = _{ "#" ~ (!"#" ~ ANY)* ~ NEWLINE }

// ╭───────╮
// │ Types │
// ╰───────╯
rtype = {
  // Class instance type
  class_name ~ type_arguments?
  // Interface type
  | interface_name ~ type_arguments?
  // Alias type
  | alias_name ~ type_arguments?
  | "singleton" ~ "(" ~ class_name ~ ")"
  // | literal
  // | rtype | rtype
  // | rtype & rtype
  // | rtype ?
  | "{" ~ record_name ~ ":" ~ rtype ~ ("," ~ rtype)* ~ "}"
  | "self"
  | "instance"
  | "class"
  | "bool"
  | "untyped"
  | "nil"
  | "top"
  | "bot"
  | "void"
  // | proc
}
  record_name = { var_name }
  class_name = ${ module_name_inner }
    module_name_inner = _{ namespace* ~ UPPERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }
  module_name = ${ module_name_inner }
  interface_name = ${ namespace* ~ "_" ~ UPPERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }
  alias_name = ${ namespace* ~ LOWERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }
  type_variable = ${ UPPERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }

// Spec allows for empty; use `namespace*` at use-site.
namespace = ${ "::" |  (namespace_name ~ "::")+ }
  namespace_name = ${ UPPERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }

// Spec allows for empty; use `type_arguments?` at use-site.
type_arguments = { "[" ~ rtype ~ ("," ~ rtype)* ~ "]" }

// ╭─────────────────────────────╮
// │ Method Types and Proc Types │
// ╰─────────────────────────────╯
method_type = {
  parameters? ~ block? ~ "->" ~ rtype
  | "(" ~ "?" ~ ")" ~ "->" ~ rtype
}
  // Spec allows for empty; use `parameters?` at use-site.
  parameters = {
    "("
      ~ required_positionals*
      ~ optional_positionals*
      ~ rest_positional?
      ~ trailing_positionals?
      // ~ keywords
      ~ kwargs?
    ~ ")"
  }
    parameter = { rtype ~ var_name | rtype }
    required_positionals = { parameter ~ ("," ~ parameter)* }
    optional_positionals = { "?" ~ parameter ~ ("," ~ "?" ~ parameter)* }
    // Spec allows for empty; use `rest_positional?` at use-site.
    rest_positional = { "*" ~ parameter }
    trailing_positionals = { parameter ~ ("," ~ parameter)* }
    // The spec calls these "keywords", but that's confusing.
    //
    // Also, it doesn't define what `keyword` is, but I believe that's the same
    // as a `var_name`, so I'll use that.
    //
    // Spec allows for empty; use `kwargs?` at use-site.
    kwargs = {
      // Rest kwarg
      "**" ~ parameter
      // Required kwarg
      | var_name ~ ":" ~ parameter ~ "," ~ kwargs
      // Optional kwarg
      | "?" ~ var_name ~ ":" ~ parameter ~ "," ~ kwargs
    }
    var_name = { LOWERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }
  // Spec allows for empty; use `self_type_binding?` at use-site.
  self_type_binding = { "[" ~ "self" ~ ":" ~ rtype ~ "]" }
  // Spec allows for empty; use `block?` at use-site.
  block = {
    "{" ~ parameters? ~ self_type_binding? ~ "->" ~ rtype ~ "}"
  }

// ╭─────────╮
// │ Members │
// ╰─────────╯
member = {
  ivar_member
  | method_member
  | attribute_member
  | include_member
  | extend_member
  | prepend_member
  | alias_member
  | visibility_member
}
  ivar_member = {
    ivar_name ~ ":" ~ rtype
    | "self" ~ "." ~ ivar_name ~ ":" ~ rtype
    | cvar_name ~ ":" ~ rtype
  }
  method_member = { instance_method | singleton_method | singleton_and_instance_method }
    instance_method = { visibility? ~ "def" ~ method_name ~ ":" ~ method_types }
    singleton_method = { visibility? ~ "def" ~ "self" ~ "." ~ method_name ~ ":" ~ method_types }
    singleton_and_instance_method = { visibility? ~ "def" ~ "self" ~ "?" ~ "." ~ method_name ~ ":" ~ method_types }
    method_name = ${ CASED_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }
    method_types = {
      method_type_parameters? ~ method_type 
     | method_type_parameters? ~ method_type ~ "|" ~ method_types
    }
    // Spec allows for empty; use `method_type_parameters?` at use-site.
    method_type_parameters = { "[" ~ type_variable ~ ("," ~ type_variable)* ~ "]" }
  // NOTE: The spec doesn't articulate this, but tests at the following validate
  // that `method_name` can also be a `self.[whatever]`:
  // https://github.com/ruby/rbs/blob/42d56a0aeb1d85c72ea8b62ecbd357cbf1bcaf6b/test/rbs/parser_test.rb#L285
  attribute_member = {
    // Attribute
    visibility? ~ attribute_type ~ method_name ~ ":" ~ rtype
    // Attribute with variable name specification
    | visibility? ~ attribute_type ~ method_name ~ "(" ~ ivar_name ~ ")" ~ ":" ~ rtype
    // Attribute without variable
    | visibility? ~ attribute_type ~ method_name ~ "(" ~ ")" ~ ":" ~ rtype
  }
    attribute_type = { "attr_reader" | "attr_writer" | "attr_accessor" }
  include_member = {
    "include" ~ class_name ~ type_arguments?
    | "include" ~ interface_name ~ type_arguments?
  }
  extend_member = {
    "extend" ~ class_name ~ type_arguments?
    | "extend" ~ interface_name ~ type_arguments?
  }
  prepend_member = { "prepend" ~ class_name ~ type_arguments? }
  alias_member = {
    "alias" ~ method_name ~ method_name
    | "alias" ~ "self" ~ "." ~ method_name ~ "self" ~ "." ~ method_name
  }
  visibility_member = { visibility }

  visibility = { "public" | "private" }
  ivar_name = ${ "@" ~ (CASED_LETTER | "_")+ }
  cvar_name = ${ "@@" ~ CASED_LETTER+ }

// ╭──────────────╮
// │ Declarations │
// ╰──────────────╯
decl = {
  class_decl
  | module_decl
  // | class_alias_decl
  // | module_alias_decl
  // | interface_decl
  // | type_alias_decl
  | const_decl
  // | global_decl
}
  class_decl = {
    "class" ~ class_name ~ module_type_parameters? ~ member* ~ "end"
    | "class" ~ class_name ~ module_type_parameters? ~ "<" ~class_name ~ type_arguments ~ member* ~ "end"
  }
  module_decl = {
    "module" ~ module_name ~ module_type_parameters? ~ member* ~ "end"
    | "module" ~ module_name ~ module_type_parameters? ~ ":" ~ module_self_types ~ member* ~ "end"
  }
    module_self_types = {
      // Class instance
      class_name ~ type_arguments? ~ ("," ~ module_self_types)*
      // Interface
      | interface_name ~ type_arguments? ~ ("," ~ module_self_types)*
    }
  const_decl = { const_name ~ ":" ~ rtype }
    const_name = { const_name_inner+ }
      const_name_inner = _{ namespace? ~ UPPERCASE_LETTER ~ (ASCII_ALPHANUMERIC | "_")* }
  // Spec allows for empty; use `module_type_parameters?` at use-site.
  module_type_parameters = { "[" ~ module_type_parameter ~ ("," ~ module_type_parameter)* ~ "]" }

// ╭───────────╮
// │ Generics  │
// ╰───────────╯
module_type_parameter = {
  generics_unchecked? ~ generics_variance? ~ type_variable ~ generics_bound?
}
  // Spec allows for empty; use `generics_bound?` at use-site.
  generics_bound = { "<" ~ bound_type }
    bound_type = {
      class_name ~ type_arguments?
      | interface_name ~ type_arguments?
      | "singleton" ~ "(" ~ class_name ~ ")"
    }
  // Spec allows for empty; use `generics_variance?` at use-site.
  generics_variance = { "out" | "in" }
  // Spec allows for empty; use `generics_unchecked?` at use-site.
  generics_unchecked = { "unchecked" }
